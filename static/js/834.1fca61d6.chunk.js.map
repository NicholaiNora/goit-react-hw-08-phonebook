{"version":3,"file":"static/js/834.1fca61d6.chunk.js","mappings":"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","sources":["../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","features/selectors.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/SearchFilter/SearchFilter.module.css?1801","components/SearchFilter/SearchFilter.jsx","webpack://react-homework-template/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"formLabel\":\"ContactForm_formLabel__TSwxK\",\"formInput\":\"ContactForm_formInput__GszVU\",\"formButton\":\"ContactForm_formButton__TN6Jq\"};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectStatusFilter = state => state.filter.filterValue;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectStatusFilter],\n    (contacts, filter) => {\n        if (!filter) {\n            \n            return contacts;\n          }\n          const lowerCaseFilter = filter.toLowerCase();\n          return contacts.filter(contact =>\n            contact.name.toLowerCase().includes(lowerCaseFilter)\n          );\n    // return contacts.filter(\n    //   contact =>\n    //     contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n    //     contact.phone.includes(filter)\n    // );\n  }\n);\n","// import React, { Component } from 'react';\nimport React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\n// import PropTypes from 'prop-types';\nimport css from './ContactForm.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'features/selectors';\nimport { addContact } from 'features/operations';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const contacts = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n\n  const toCapitalize = phrase => {\n    return phrase\n      .toLowerCase()\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  };\n\n  const handleChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        break;\n      case 'phone':\n        setPhone(e.target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setPhone('');\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const contactExists = contacts.find(\n      contact =>\n        contact.name.toLowerCase() === name.toLowerCase() ||\n        contact.phone === phone\n    );\n    console.log(toCapitalize(name));\n    if (contactExists) {\n      alert(`${toCapitalize(name)} or ${phone} is already in contacts.`);\n      reset();\n      return;\n    }\n\n    dispatch(addContact({ id: nanoid(), name: name, phone: phone }));\n\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.form}>\n      <label className={css.formLabel}>\n        <span>Name</span>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan.\"\n          required\n          value={name}\n          onChange={handleChange}\n          className={css.formInput}\n        />\n      </label>\n      <label className={css.formLabel}>\n        <span className={css.formSpan}>Phone Number</span>\n        <input\n          type=\"tel\"\n          name=\"phone\"\n          pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={phone}\n          onChange={handleChange}\n          className={css.formInput}\n        />\n      </label>\n\n      <button type=\"submit\" className={css.formButton}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"filterContainer\":\"SearchFilter_filterContainer__nlAPZ\",\"filterInput\":\"SearchFilter_filterInput__QJcWn\"};","// import React, { Component } from 'react';\nimport React from 'react';\n// import PropTypes from 'prop-types';\nimport css from './SearchFilter.module.css';\nimport { setFilter } from 'features/filterSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectStatusFilter } from 'features/selectors';\n\nfunction SearchFilter() {\n  const filter = useSelector(selectStatusFilter);\n  const dispatch = useDispatch()\n  \n  const handleChange = e => {\n    const { value } = e.target;\n    dispatch(setFilter(value));\n  };\n  \n  return (\n    <div className={css.filterContainer}>\n      <span>Find contacts by name</span>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan.\"\n        required\n        value={filter}\n        onChange={handleChange}\n        className={css.filterInput}\n      />\n    </div>\n  );\n}\n\nexport default SearchFilter;","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactListItem_contactItem__g+7xP\",\"contactItemSpan\":\"ContactListItem_contactItemSpan__oV0zh\",\"contactItemButton\":\"ContactListItem_contactItemButton__AS9V+\"};","// import React, { Component } from 'react';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport css from './ContactListItem.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'features/operations';\n\nfunction ContactListItem({ contact, toCapitalize }) {\n\n  const dispatch = useDispatch();\n  \n  return (\n    <li className={css.contact}>\n      <span className={css.contactItemSpan}>\n        {toCapitalize(contact.name)}: {contact.phone}\n      </span>\n      <button\n        className={css.contactItemButton}\n        onClick={() => dispatch(deleteContact(contact.id))}\n      >\n        Delete\n      </button>\n    </li>\n  );\n}\n\nContactListItem.propTypes = {\n  contact: PropTypes.object.isRequired,\n  toCapitalize: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\"};","import ContactListItem from 'components/ContactListItem/ContactListItem';\nimport React from 'react';\n// import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\nimport css from './ContactList.module.css';\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'features/selectors';\n\nfunction ContactList() {\n  const toCapitalize = phrase => {\n    return phrase\n      .toLowerCase()\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  };\n\n  const filteredContacts = useSelector(selectFilteredContacts); \n  console.log(filteredContacts);\n  // const filterContacts = () => {\n  //   return contacts.filter(\n  //     contact =>\n  //       contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n  //       contact.phone.includes(filter)\n  //   );\n  // };\n\n  // const filteredContacts = filterContacts();\n  return (\n    <ul className={css.contactList}>\n      {filteredContacts.map(contact => (\n        <ContactListItem\n          key={contact.id}\n          toCapitalize={toCapitalize}\n          contact={contact}\n        />\n      ))}\n    </ul>\n  );\n}\n\nexport default ContactList;\n","// import React, { Component } from 'react';\nimport React from 'react';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport SearchFilter from 'components/SearchFilter/SearchFilter';\nimport ContactList from 'components/ContactList/ContactList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'features/operations';\nimport { selectError, selectIsLoading } from 'features/selectors';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\n\nexport default function Contacts() {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <HelmetProvider>\n        <Helmet>\n          <title>Contacts</title>\n        </Helmet>\n      </HelmetProvider>\n      <h2>Phonebook</h2>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <SearchFilter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactList />\n    </div>\n  );\n}\n"],"names":["urlAlphabet","nanoid","size","arguments","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","scopedUrlAlphabet","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectStatusFilter","filter","filterValue","selectFilteredContacts","createSelector","lowerCaseFilter","toLowerCase","contact","name","includes","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","phone","setPhone","useSelector","dispatch","useDispatch","toCapitalize","phrase","split","map","word","charAt","toUpperCase","slice","join","handleChange","e","target","value","reset","_jsxs","onSubmit","preventDefault","contactExists","find","console","log","alert","concat","addContact","className","css","children","_jsx","type","pattern","title","required","onChange","setFilter","_ref","onClick","deleteContact","filteredContacts","ContactListItem","Contacts","useEffect","fetchContacts","HelmetProvider","Helmet","ContactForm","SearchFilter","ContactList"],"sourceRoot":""}